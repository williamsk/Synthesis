<?xml version="1.0"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<synthesis>
			<synchronizationSettings>
				<!--  STARTUP CHECK MODE
					Controls how the application manages synchronization when it starts
					Requires registration of the Synthesis.StartupSynchronizationModule HTTP module to work
					
					Valid values:
					- Off - do not check model synchronization on startup
					- Log - writes warning events to the Sitecore log if the model is not current
					- Regenerate - attempts to automatically resync the model without user interaction (see also StartupRegenerateProjectPath)
					
					WARNING: If you have mode set to Regenerate, and your generation settings don't cause a synchronized model to be generated,
					you will send IIS into an infinite loop (as the regeneration causes an app pool restart, which then regenerates again because
					it's still not synchronized). An easy way to do this is to have the wrong assemblies passed to the type list provider, or the generated
					files not included in the project. As a general rule start with Log and get it working before using Regenerate.
				-->
				<setting name="StartupCheckMode" value="Log" />
				
				<!--  STARTUP REGENERATE PROJECT PATH
					This is the path to a .NET project file that, when built, will update the 
					assembly containing the model. When set to "auto," it will attempt to find
					a .csproj file in the parent director(ies) of the ItemOutputPath setting to build.
					
					Valid only when StartupCheckMode = Regenerate
					
					If the path begins with ~, it will be treated as site-root-relative, 
					otherwise it will be treated as an absolute path.
					
					Escaping the site root path IS supported (i.e. ~/../MyProject/MyProject.csproj)
				-->
				<setting name="StartupRegenerateProjectPath" value="auto" />
			</synchronizationSettings>
			

			<providers>
        <!-- GENERATOR
          This is the code generator to be used.
          The default code generator is initialized with the following providers. -->
        <generator type="Synthesis.Generation.Generator, Synthesis" />
        
				<!-- GENERATOR PARAMETERS PROVIDER 
					This provider configures the settings used when generating the domain model.
					The default provider reads its parameters from the config file.
				-->
				<generatorParametersProvider type="Synthesis.Configuration.ConfigurationGeneratorParametersProvider, Synthesis">
					<!--  ITEM NAMESPACE
						The root namespace to use for the generated items.
						E.g. your "Foo" template would be "Synthesis.Model.Concrete.Foo"
						if this setting were set to "Synthesis.Model.Concrete"
					-->
					<ItemNamespace>Synthesis.Model.Concrete</ItemNamespace>

					<!--  INTERFACE NAMESPACE
						The root namespace to use for the generated interfaces.
						E.g. your "Foo" template would be "Synthesis.Model.IFooItem"
						if this setting were set to "Synthesis.Model"
					-->
					<InterfaceNamespace>Synthesis.Model</InterfaceNamespace>

					<!--  ITEM OUTPUT PATH
						Path to write the output concrete item source file to. 
						Must have write access. Must end in ".cs"
						If the path begins with ~, it will be treated as site-root-relative, 
						otherwise it will be treated as an absolute path.
					
						Escaping the site root path IS supported (i.e. ~/../MyProject/Model/Model.Concrete.cs)
					-->
					<ItemOutputPath>~/Synthesis.Model.Concrete.cs</ItemOutputPath>

					<!--  INTERFACE OUTPUT PATH
						Path to write the output interfaces source file to. 
						Must have write access. Must end in ".cs"
						If the path begins with ~, it will be treated as site-root-relative, 
						otherwise it will be treated as an absolute path.
					
						Escaping the site root path IS supported (i.e. ~/../MyProject/Model/Model.cs)
					-->
					<InterfaceOutputPath>~/Synthesis.Model.cs</InterfaceOutputPath>

					<!--  USE TEMPLATE PATH FOR NAMESPACE
						When false: All model items and interfaces live in their root namespace regardless of Sitecore structure
						When true: All model items and interfaces live in namespaces based on their relative path in Sitecore
									The root of this relative path is controlled by the TemplatePathRoot setting.
								
						For example:
						With a template "/sitecore/Templates/MySite/Pages/Foo",
						and TemplatePathRoot "/sitecore/Templates/MySite",
						and InterfaceNamespace "MySite.Model",
						If this is set to true: template would be represented by MySite.Model.Pages.IFooItem
						If this is set to false: template would be represented by MySite.Model.IFooItem
					-->
					<UseTemplatePathForNamespace>true</UseTemplatePathForNamespace>

					<!-- TEMPLATE PATH ROOT
						Sets the root Sitecore template path used to calculate output namespaces when the 
						UseTemplatePathForNamespace parameter is true.
						If UseTemplatePathForNamespace is false, this has no effect.
					-->
					<TemplatePathRoot>/sitecore/templates</TemplatePathRoot>

					<!--  MAX BACKUP COPIES 
						Sets the number of backup copies the generator should keep of previous generated code.
						Useful for testing changes to the generator code, or if a template change causes
						many compiler errors and you want to revert to a compilable state.
					
						Backup copies are named in order, so if your output item was "Model.cs,"
						you would get "Model.cs.1," "Model.cs.2," etc until the maximum number was reached.
					-->
					<MaxBackupCopies>5</MaxBackupCopies>

					<!--  ITEM BASE CLASS
						Type of the base class for all model items. 
						Should derive from Synthesis.StandardTemplateItem if using something custom.
						
						IMPORTANT: If a template is not mapped and you transform it into a Synthesis item,
						that item will always be returned as a Synthesis.StandardTemplateItem regardless of this setting!
					-->
					<ItemBaseClassType>Synthesis.StandardTemplateItem, Synthesis</ItemBaseClassType>

					<!--  ITEM BASE INTERFACE
						Type of the base class for all model items. 
						Should derive from Synthesis.IStandardTemplateItem if using something custom.
						The Item Base Class must implement this interface.
					-->
					<ItemBaseInterfaceType>Synthesis.IStandardTemplateItem, Synthesis</ItemBaseInterfaceType>

					<!--  SITECORE KERNEL ASSEMBLY PATH
						Path to find a copy of Sitecore.Kernel.dll.
						Required for the generation process.

						If the path begins with ~, it will be treated as site-root-relative, 
						otherwise it will be treated as an absolute path.
					
						Escaping the site root path IS supported (i.e. ~/../MyProject2/bin/Sitecore.Kernel.dll)
					-->
					<SitecoreKernelAssemblyPath>~/bin/Sitecore.Kernel.dll</SitecoreKernelAssemblyPath>

					<!--  SYNTHESiS ASSEMBLY PATH
						Path to find a copy of Synthesis.dll.
						Required for the generation process.
						
						If the path begins with ~, it will be treated as site-root-relative, 
						otherwise it will be treated as an absolute path.
					
						Escaping the site root path IS supported (i.e. ~/../MyProject2/bin/Synthesis.dll)
					-->
					<SynthesisAssemblyPath>~/bin/Synthesis.dll</SynthesisAssemblyPath>

					<!-- INTERFACE SUFFIX
						The suffix to append to generated interfaces. For example, if this is set to "Item" (the default),
						and a template called Foo is generated, you will have an IFooItem interface created for it
					-->
					<InterfaceSuffix>Item</InterfaceSuffix>
				</generatorParametersProvider>
				
				<!-- TEMPLATE INPUT PROVIDER
					This provider is responsible for generating the list of templates that should
					have model objects generated for them and managing which fields should be mapped. 
					Custom providers should derive from Synthesis.Templates.ITemplateListProvider.
				-->
				<templateInputProvider type="Synthesis.Configuration.ConfigurationTemplateInputProvider, Synthesis">
					<!-- INCLUDED PATHS
						One or more Template Specs to include templates from for generation/sync.
						If no included paths are defined, nothing will be generated.
						
						Template Specs can be one of the following:
						- Name ("Standard Template"). Matches any template regardless of location with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or template folder (includes all children) with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a path in Sitecore. If a folder, applies to all children. If a template, applies to the specific template.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template with a name or path that the wildcard matches.
						
						When using UseTemplatePathForNamespace = true, make sure the 
						TemplatePathRoot setting is configured to be at a higher level
						than all the included paths to avoid confusing namespaces.
						
						IMPORTANT: You may use any element name to declare each path,
						but you can't use the same element name more than once.
					-->
					<includedPaths hint="list:AddTemplatePath"> 
						<templates>/sitecore/Templates</templates>
						<fake-guid>{516F709D-C3E4-4652-868F-6C2AAD9921A1}</fake-guid>
						<wildcard>/sitecore/templates/Sites/*/Pages</wildcard>
					</includedPaths>
					
					<!--  EXCLUDED TEMPLATES 
						Excludes templates that match a Template Spec from generation/sync.
						
						Template Specs can be one of the following:
						- Name ("Standard Template"). Matches any template regardless of location with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or template folder (includes all children) with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a path in Sitecore. If a folder, applies to all children. If a template, applies to the specific template.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template with a name or path that the wildcard matches.
						
						NOTE: If another included template inherits from an excluded template,
						an interface will still be generated for the excluded template. This can
						be used to your advantage to avoid generating concrete model objects for 
						templates that are "abstract" in Sitecore
						
						IMPORTANT: You may use any element name to declare each spec,
						but you can't use the same element name more than once.
					-->
					<excludedTemplates hint="list:AddTemplateExclusion">
						<example>Template*</example>
						<fake-guid>{13794FA0-002E-4320-BF38-B29A41EBBA78}</fake-guid>
						<common-templates>/sitecore/templates/Common</common-templates>
						<folder-guid>{7189270B-F7E1-4405-BE9E-0C9241172BBB}</folder-guid>
						<wildcard>/sitecore/templates/Sites/*/Abstract</wildcard>
					</excludedTemplates>

					<!--  EXCLUDED FIELDS
						Excludes individual fields from having strongly typed properties generated.
						You may specify a field name globally to all templates, or specific to 
						an individual template by specifying it as "templatespec::fieldspec"
						
						Template or Field Specs can be one of the following:
						- Name ("Standard Template"). Matches any template or field with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or field with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a template or field path in Sitecore.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template or field with a name or path that the wildcard matches.
						
						Examples:
						Title -> excludes all fields called title on any template
						My Template::Title -> excludes a field called title on a template called My Template
						* Page::Show* -> excludes any field that begins with "Show" on any template whose name ends with " Page"
						
						IMPORTANT: Excluding a field on a template excludes that field from ALL templates
						that contain the field (i.e. that inherit it, as well as its base template). This applies
						whether you exclude the field on the base template or a derived template.
						
						IMPORTANT: You may use any element name to declare each spec,
						but you can't use the same element name more than once.
					-->
					<excludedFields hint="list:AddFieldExclusion">
						<standard-fields>__*</standard-fields>
						<show-in-nav>Show in Navigation</show-in-nav>
						<standard-created>Standard Template::__Created</standard-created>
						<folder-fake>/sitecore/Templates/Common/Folder::Fake Field</folder-fake>
						<whoa>RSS*::I*</whoa>
					</excludedFields>
				</templateInputProvider>

				<!--  FIELD MAPPING PROVIDER
					Controls which custom field class is mapped to a given Sitecore field type name.
					The custom classes need not derive from anything specific, but they MUST have a 
					constructor that accepts a Sitecore.Data.Field parameter. If no mapping exists for a field
					type, it will map to a TextField.
				
					You can accomplish some awesome things with custom mappings - for example providing
					a strongly typed access method for a custom field type that stores complex data as XML,
					or implementing custom link URL logic for your site by overriding the HyperlinkField class.
				-->
				<fieldMappingProvider type="Synthesis.Configuration.ConfigurationFieldMappingProvider, Synthesis">
					<fieldMappings hint="raw:AddMapping">
						<!-- Simple Types -->
						<map field="Checkbox" type="Synthesis.FieldTypes.BooleanField, Synthesis" />
						<map field="Date" type="Synthesis.FieldTypes.DateTimeField, Synthesis" />
						<map field="Datetime" type="Synthesis.FieldTypes.DateTimeField, Synthesis" />
						<map field="File" type="Synthesis.FieldTypes.FileField, Synthesis" />
						<map field="Image" type="Synthesis.FieldTypes.ImageField, Synthesis" />
						<map field="Integer" type="Synthesis.FieldTypes.IntegerField, Synthesis" />
						<map field="Multi-Line Text" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="Number" type="Synthesis.FieldTypes.NumericField, Synthesis" />
						<map field="Password" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="Rich Text" type="Synthesis.FieldTypes.RichTextField, Synthesis" />
						<map field="Single-Line Text" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="Word Document" type="Synthesis.FieldTypes.WordDocumentField, Synthesis" />

						<!-- List Types -->
						<map field="Checklist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" />
						<map field="Droplist" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="Grouped Droplink" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="Grouped Droplist" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="Multilist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" />
						<map field="Treelist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" />
						<map field="TreelistEx" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" />
						<map field="Name Value List" type="Synthesis.FieldTypes.DictionaryField, Synthesis" />

						<!-- Link Types -->
						<map field="Droplink" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="Droptree" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="General Link" type="Synthesis.FieldTypes.HyperlinkField, Synthesis" />

						<!-- Developer Types -->
						<map field="Tristate" type="Synthesis.FieldTypes.TristateField, Synthesis" />
						
						<!-- System Types -->
						<map field="File Drop Area" type="Synthesis.FieldTypes.FileListField, Synthesis" />
						
						<!-- Deprecated Types -->
						<map field="text" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="memo" type="Synthesis.FieldTypes.TextField, Synthesis" />
						<map field="lookup" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="reference" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="tree" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" />
						<map field="tree list" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" />
						<map field="html" type="Synthesis.FieldTypes.RichTextField, Synthesis" />
						<map field="link" type="Synthesis.FieldTypes.HyperlinkField, Synthesis" />
					</fieldMappings>
					
				</fieldMappingProvider>
				
				<!--  TEMPLATE SIGNATURE PROVIDER
					Provides a unique signature for a template and its field values.
					Used when comparing Sitecore to the domain model for synchronization.
					Override this if you need a more or less strict idea of what template equality means.
				-->
				<templateSignatureProvider type="Synthesis.Templates.Sha1TemplateSignatureProvider, Synthesis" />
				
				<!--  TYPE LIST PROVIDER
					Provides a set of types that should be considered when looking for template types to synchronize or initialize
				
					In other words, this provider should return all types in the assemblies that Synthesis' generated content
					lives in. It is appropriate for the provider to maintain an instance cache of these types as it will be invoked several times during initialization.
					
					IMPORTANT: You may use any element name to declare each assembly,
					but you can't use the same element name more than once.
				-->
				<typeListProvider type="Synthesis.Configuration.ConfigurationTypeListProvider, Synthesis" />
				<!--<typeListProvider type="Synthesis.Configuration.ConfigurationTypeListProvider, Synthesis">
					<assemblies hint="list:AddAssembly">
						<web>SynthesisDemo.Web</web>
					</assemblies>
				</typeListProvider>-->

				<!-- INDEX FIELD NAME TRANSLATOR
					This class is responsible for translating template field names into their representative search index equivalents.
					These must implement Synthesis.ContentSearch.IIIndexFieldnameTranslator. Normally these will be tied to the kind
					of search index you are using.
					
					The default value is designed for Lucene indexes.
				-->
				<indexFieldNameTranslator type="Synthesis.ContentSearch.Lucene.SynthesisLuceneIndexFieldNameTranslator, Synthesis" />
			</providers>
		</synthesis>
		<contentSearch>
			<configuration>
				<DefaultIndexConfiguration>
					<IndexDocumentPropertyMapper type="Synthesis.ContentSearch.SynthesisDocumentTypeMapper, Synthesis" />

					<fields hint="raw:AddComputedIndexField">
						<field fieldName="_templatesimplemented" storageType="yes" indexType="untokenized">Synthesis.ContentSearch.ComputedFields.InheritedTemplates, Synthesis</field>
					</fields>
				</DefaultIndexConfiguration>
			</configuration>
		</contentSearch>
	</sitecore>
</configuration>